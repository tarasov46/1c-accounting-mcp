import asyncio
import random
from datetime import datetime


class TestTool:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞"""

    async def hello_1c(self, name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        return f"""
üöÄ –ü—Ä–∏–≤–µ—Ç, {name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è 1–° –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏!

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:
- –í—Ä–µ–º—è: {current_time}
- –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚úÖ
- –í–µ—Ä—Å–∏—è: 1.0.0
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: @tarasov46

üõ† –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª.

üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Claude Desktop –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:
{{"mcpServers": {{"1c-accounting": {{"command": "npx", "args": ["@tarasov46/1c-accounting-mcp"]}}}}}}
        """

    async def test_calculation(self, a: float, b: float, operation: str = "add") -> str:
        """–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if operation == "add":
                result = a + b
                symbol = "+"
            elif operation == "subtract":
                result = a - b
                symbol = "-"
            elif operation == "multiply":
                result = a * b
                symbol = "√ó"
            elif operation == "divide":
                if b == 0:
                    return "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!"
                result = a / b
                symbol = "√∑"
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"

            return f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {a} {symbol} {b} = {result}"

        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}"

    async def generate_test_data(self, count: int = 5) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å 1–°)"""
        if count > 20:
            return "–ú–∞–∫—Å–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞"

        companies = ["–û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞", "–ò–ü –ò–≤–∞–Ω–æ–≤", "–û–û–û –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ó–ê–û –ü—Ä–æ–≥—Ä–µ—Å—Å", "–û–û–û –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏"]
        operations = ["–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥", "–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"]

        result = "üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è 1–°):\n\n"

        for i in range(count):
            company = random.choice(companies)
            operation = random.choice(operations)
            amount = random.randint(1000, 100000)

            result += f"{i + 1}. {company}\n"
            result += f"   –û–ø–µ—Ä–∞—Ü–∏—è: {operation}\n"
            result += f"   –°—É–º–º–∞: {amount:,} —Ä—É–±.\n"
            result += f"   –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n\n"

        return result
