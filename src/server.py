#!/usr/bin/env python3
import asyncio
import logging
import os
from typing import Any, Dict

from mcp.server.fastmcp import FastMCP
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
from tools.test_tool import TestTool

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("1c-accounting-mcp")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
mcp = FastMCP("1c-accounting-mcp")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
test_tool = TestTool()


# ==========================================
# –¢–ï–°–¢–û–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
# ==========================================

@mcp.tool()
async def hello_1c(name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MCP —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è 1–°

    Args:
        name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    """
    logger.info(f"–í—ã–∑–≤–∞–Ω hello_1c –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}")
    return await test_tool.hello_1c(name)


@mcp.tool()
async def test_calculation(a: float, b: float, operation: str = "add") -> str:
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã MCP

    Args:
        a: –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
        b: –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
        operation: –û–ø–µ—Ä–∞—Ü–∏—è (add, subtract, multiply, divide)
    """
    logger.info(f"–í—ã–∑–≤–∞–Ω test_calculation: {a} {operation} {b}")
    return await test_tool.test_calculation(a, b, operation)


@mcp.tool()
async def generate_test_data(count: int = 5) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ä–∞–±–æ—Ç—É —Å 1–°

    Args:
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 20)
    """
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
    return await test_tool.generate_test_data(count)


# ==========================================
# –†–ï–°–£–†–°–´
# ==========================================

@mcp.resource(
    uri="info://1c-server",
    name="server_info",
    description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MCP —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è 1–°"
)
async def server_info() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    return """
üè¢ MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
================================

üìä –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 1–° –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª

üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- hello_1c - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
- test_calculation - –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä  
- generate_test_data - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

üöÄ –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: @tarasov46
üìß GitHub: https://github.com/tarasov46/1c-accounting-mcp
üì¶ NPM: @tarasov46/1c-accounting-mcp

üîß –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Claude Desktop:
{"mcpServers": {"1c-accounting": {"command": "npx", "args": ["@tarasov46/1c-accounting-mcp"]}}}
    """


# ==========================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ==========================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è 1–° –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏...")
    logger.info("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: @tarasov46")
    logger.info("–î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: 3")
    mcp.run(transport='stdio')


if __name__ == "__main__":
    main()
